generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  image         String?
  name          String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  member        Member    @relation(fields: [email], references: [orbitMail])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Application {
  applicationID Int            @id @default(autoincrement())
  ntnuUsername  String         @unique
  email         String         @unique
  phoneNumber   String         @unique
  fieldOfStudy  String
  yearOfStudy   Int
  experience    String         @db.Text
  aboutYou      String         @db.Text
  accepted      Boolean
  name          String
  keep          Boolean
  rejectTime    DateTime?      @db.Time(0)
  teams         ApplyForTeam[]
  interviews    Interview?
}

model ApplyForTeam {
  applicationID Int
  teamID        Int
  priority      Int
  interested    Boolean     @default(true)
  application   Application @relation(fields: [applicationID], references: [applicationID])
  team          Team        @relation(fields: [teamID], references: [teamID])

  @@id([applicationID, teamID])
  @@index([teamID], map: "ApplyForTeam_teamID_fkey")
}

model Interview {
  interviewerID Int
  applicationID Int         @unique
  room          String
  time          DateTime
  application   Application @relation(fields: [applicationID], references: [applicationID])
  interviewer   Member      @relation(fields: [interviewerID], references: [memberID])

  @@id([interviewerID, applicationID])
}

model Team {
  teamID       Int            @id @default(autoincrement())
  teamName     String
  group        Team_group?
  applications ApplyForTeam[]
  members      TeamHistory[]
}

model Member {
  memberID             Int            @id @default(autoincrement())
  activeStatus         Boolean        @default(true)
  fieldOfStudy         String?
  birthday             DateTime?      @db.Date
  phoneNumber          String?        @unique
  ntnuMail             String?        @unique
  orbitMail            String         @unique(map: "orbitMail_UNIQUE")
  nationalities        String?
  yearOfStudy          Int?
  additionalComments   String?        @db.Text
  slackID              String?
  personalMail         String?
  name                 String
  linkedin             String?
  showPhoneNrOnWebsite Boolean        @default(false)
  birthdayBot          Boolean        @default(true)
  anouncements         Announcement[]
  CV                   CV?
  events               Event[]
  interviews           Interview[]
  memes                Meme[]
  MemeLord             MemeLord?
  teamHistory          TeamHistory[]
  user                 User?
}

model TeamHistory {
  teamHistoryID   Int                     @id @default(autoincrement())
  memberID        Int
  teamID          Int
  startYear       Int                     @db.Year
  startSem        SemType
  endYear         Int?                    @db.Year
  endSem          SemType?
  priviledges     TeamHistory_priviledges @default(MEMBER)
  cPosition       TeamHistory_cPosition?
  decorativeTitle String?
  endDate         DateTime?               @db.Date
  member          Member                  @relation(fields: [memberID], references: [memberID])
  team            Team                    @relation(fields: [teamID], references: [teamID])

  @@index([teamID], map: "TeamHistory_teamID_fkey")
  @@index([memberID], map: "TeamHistory_memberID_fkey")
}

model Meme {
  week     Int
  year     Int     @db.Year
  memberID Int
  meme     Bytes
  title    String?
  member   Member  @relation(fields: [memberID], references: [memberID])

  @@id([week, year])
  @@index([memberID], map: "Meme_memberID_fkey")
}

model Announcement {
  announcementID Int      @id @default(autoincrement())
  postTime       DateTime
  memberID       Int
  announcement   String   @db.Text
  title          String?
  member         Member   @relation(fields: [memberID], references: [memberID])

  @@index([memberID], map: "Announcement_memberID_fkey")
}

model Event {
  eventID        Int        @id @default(autoincrement())
  name           String
  startTime      DateTime
  description    String?    @db.Text
  location       String
  memberID       Int
  timeOfCreation DateTime   @default(now())
  type           Event_type
  endTime        DateTime
  member         Member     @relation(fields: [memberID], references: [memberID])

  @@index([memberID], map: "Event_memberID_fkey")
}

model MemeLord {
  memberID Int    @id
  Member   Member @relation(fields: [memberID], references: [memberID])
}

model CV {
  memberID Int       @id
  cv       Bytes
  date     DateTime  @default(now())
  Member   Member    @relation(fields: [memberID], references: [memberID])
  KeyWord  KeyWord[] @relation("CVToKeyWord")
}

model KeyWord {
  keyword String @id
  CV      CV[]   @relation("CVToKeyWord")
}

enum SemType {
  FALL
  SPRING
}

enum TeamHistory_priviledges {
  MEMBER
  BOARD
  LEADER
  MENTOR
}

enum Event_type {
  SOCIAL
  WORK
  PRIORITY
  OTHER
}

enum Team_group {
  IT
  TECHNICAL
  FINANCIAL
  ADMINISTRATIVE
  MARKETING_AND_EVENT
  MENTORS
  SUPPORT
}

enum TeamHistory_cPosition {
  CEO
  COO
  CTO
  CFO
  CMO
  CIO
  CHRO
  PM_FS1
  PM_FS1_5 @map("PM_FS1.5")
  PM_FS2
  PM_BS
  NTNU_REP
  DCEO
  PM_SS
}
