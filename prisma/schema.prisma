generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Application {
  applicationID Int            @id @default(autoincrement())
  ntnuUsername  String         @unique
  email         String         @unique
  phoneNumber   String         @unique
  fieldOfStudy  String
  yearOfStudy   Int
  experience    String         @db.Text
  aboutYou      String         @db.Text
  accepted      Boolean
  firstName     String
  keep          Boolean
  lastName      String
  rejectTime    DateTime?      @db.Time(0)
  teams         ApplyForTeam[]
  inInterestOf  InterestedIn[]
  interviews    Interview?
}

model ApplyForTeam {
  applicationID Int
  teamID        Int
  priority      Int
  application   Application @relation(fields: [applicationID], references: [applicationID])
  team          Team        @relation(fields: [teamID], references: [teamID])

  @@id([applicationID, teamID])
  @@index([teamID], map: "ApplyForTeam_teamID_fkey")
}

model Interview {
  interviewerID Int
  applicationID Int         @unique
  room          String
  time          DateTime
  application   Application @relation(fields: [applicationID], references: [applicationID])
  interviewer   Member      @relation(fields: [interviewerID], references: [memberID])

  @@id([interviewerID, applicationID])
}

model InterestedIn {
  memberID      Int
  applicationID Int
  application   Application @relation(fields: [applicationID], references: [applicationID])
  member        Member      @relation(fields: [memberID], references: [memberID])

  @@id([memberID, applicationID])
  @@index([applicationID], map: "InterestedIn_applicationID_fkey")
}

model Team {
  teamID       Int            @id @default(autoincrement())
  teamName     String
  applications ApplyForTeam[]
  members      TeamHistory[]
}

model Member {
  memberID           Int            @id @default(autoincrement())
  firstName          String
  lastName           String
  activeStatus       Boolean        @default(true)
  fieldOfStudy       String
  birthday           DateTime?      @db.Date
  phoneNumber        String         @unique
  ntnuMail           String         @unique
  orbitMail          String         @unique
  nationalities      String?
  yearOfStudy        Int?
  additionalComments String?        @db.Text
  slackToken         String?        @unique
  userId             String?        @unique
  anouncements       Announcement[]
  events             Event[]
  interestedIn       InterestedIn[]
  interviews         Interview[]
  memes              Meme[]
  team               TeamHistory[]
}

model TeamHistory {
  memberID    Int
  teamID      Int
  startYear   Int                    @db.Year
  startSem    TeamHistory_startSem
  endYear     Int?                   @db.Year
  endSem      TeamHistory_endSem?
  priviledges Priviledge             @default(MEMBER)
  cPosition   TeamHistory_cPosition?
  member      Member                 @relation(fields: [memberID], references: [memberID])
  team        Team                   @relation(fields: [teamID], references: [teamID])

  @@id([memberID, teamID, startYear, startSem])
  @@index([teamID], map: "TeamHistory_teamID_fkey")
}

model Meme {
  week     Int
  year     Int    @db.Year
  memberID Int
  meme     Bytes
  member   Member @relation(fields: [memberID], references: [memberID])

  @@id([week, year])
  @@index([memberID], map: "Meme_memberID_fkey")
}

model Announcement {
  announcementID Int      @id @default(autoincrement())
  postTime       DateTime
  memberID       Int
  announcement   String   @db.Text
  member         Member   @relation(fields: [memberID], references: [memberID])

  @@index([memberID], map: "Announcement_memberID_fkey")
}

model Event {
  eventID        Int       @id @default(autoincrement())
  name           String
  startTime      DateTime
  description    String?   @db.Text
  location       String
  memberID       Int
  timeOfCreation DateTime  @default(now())
  type           EventType
  endTime        DateTime
  member         Member    @relation(fields: [memberID], references: [memberID])

  @@index([memberID], map: "Event_memberID_fkey")
}

enum Priviledge {
  MEMBER
  BOARD
  LEADER
}

enum EventType {
  SOCIAL
  WORK
  PRIORITY
}

enum TeamHistory_startSem {
  FALL
  SPRING
}

enum TeamHistory_endSem {
  FALL
  SPRING
}

enum TeamHistory_cPosition {
  CEO
  COO
  CTO
  CFO
  CMO
  CIO
  CHRO
  PM_FS1
  PM_FS1_5 @map("PM_FS1.5")
  PM_FS2
  PM_BS
}
